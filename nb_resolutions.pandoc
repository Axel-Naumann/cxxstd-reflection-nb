---
title: "Suggested Reflection TS NB Resolutions"
document: D????
date: 2019-01-10
audience: SG7/Evolution/LEWG/LWG/Core
author:
  - name: Matus Chochlik
    email: <chochlik@gmail.com>
  - name: Axel Naumann
    email: <Axel.Naumann@cern.ch>
  - name: David Sankel
    email: <dsankel@bloomberg.net>
toc: true
toc-depth: 4
---

# Introduction

This paper contains resolution suggestions to national body comments issued in
@N5325 which summarizes responses to @N4766, the proposed Reflection TS.

# Suggested core resolutions (EWG / CWG)

## CH 004 (04.03)

## CH 005 (06p1)

## CH 006 (06p1)

## CA 4 008 (08)

## PL 009 (10.01.7.2, 10.1.7.6)

## CH 010 (10.01.7.2)

## CA 5 011 (10.01.7.2)

## CH 013 (10.01.7.6)

## CA 12 016 (10.01.7.6 p1)

## CA 11 017 (10.01.7.6 p1)

## CA 9 019 (10.01.7.6 p1)

## CA 7 021 (10.01.7.6 p1)

## US 024 (10.01.7.6 p1)

## US 025 (10.01.7.6 p1)

## CH 026 (17.07.2.1 p09.10)

## CA 13 027 (17.07.2.1 p1)

## CH 029 (21.12)

## CA 16 030 (21.12)

## CA 15 031 (21.12)

## CH 032 (21.12.02)

## PL 035 (21.12.02)

## PL 036 (21.12.02)

## CH 039 (21.12.02, 21.12.3.9)

## CH 040 (21.12.03)

## CH 041 (21.12.3)/CH 072 (21.12.04.5)

See 21.12.4.5. This is the proper use of namespacing and do not expect
problems. Suggest no action.

## CH 041 (21.12.3.10)

Suggest to accept this change.

```diff
- template <class T> concept Namespace = Scope<T> && see below;
+ template <class T> concept Namespace = Named<T> && Scope<T> && see below;
```

Test [for the first form]{.add}

## CH 042 (21.12.3.18)

This is a misunderstanding. A 'base' in this case has a class which is
accessible with `get_class`. This class then has a name. Suggest no action.

## CH 043 (21.12.03.6)

## CH 044 (21.12.03.7)

## CA 19 045 (21.12.04)

## CA 18 046 (21.12.04)

## PL 047 (21.12.04)

It is unclear how (or if) such a thing can be implemented. At any rate, this is
something that can be added in the future if we get implementation experience
that suggests this is possible and desirable.

## CA 20 049 (21.12.04.1)

## CH 050 (21.12.04.10 p1)

## CA 36 052 (21.12.04.16 p1)

## CA 35 053 (21.12.04.16)

TBD. I don't understand what is meant by "reference binding" in this context.
Myy understanding is that it is already clear that the example code is correct.
We could potentially add an example?

## PL 054 (21.12.04.18)

TBD. This is an interesting idea and the authors would invite a paper that
provides the described behavior.


## CH 057 (21.12.04.3 p2.1)

This is already the existing behavior and lambda objects are specifically
called out. See Section 21.12.4.3 paragraph 2.5. Lambda objects are not unnamed
entities.

## CH 058 (21.12.04.3)

21.12.4.2 paragraph 2.1 seeems to already handle alias templates.

TBD: do we reflect on variables?


## CA 32 060 (21.12.04.3 p2)

## CA 31 061 (21.12.04.3 p2)

## CA 28 064 (21.12.04.3 p2)

## CA 27 065 (21.12.04.3 p2)

## CA 26 066 (21.12.04.3 p2)

## CA 24 068 (21.12.04.3 p2)

## CH 074 (21.12.04.6)

TBD. This sounds like a good idea. The scope of a class template template
parameter should be the class template and the scope of a function template
template parameter should be the function.

**Needs wording**

## US 075 (21.12.04.6)

## CH 078 (21.12.04.7 and many others)

## CH 079 (21.12.04.9)

This sounds like a good idea.

**Needs wording**


## CH 080 (21.12.04.9)

This sounds like a good idea. The wording is in the proposed change.

Add new paragraph after paragraph 4:

> ::: add
> \pnum{5} `reflect::get_pointer<T>` is ill-formed if `T` reflects a reference
> and the name of the reference in a context with no lvalue-to-rvalue
> conversion would not be a constant expression."
> :::

## CH 082 (Annex C)

## GB 083 (Annex C)

## GB 084 (Annex C)

## GB 086 (General, 04.2)



# Suggested library resolutions (LEWG/LWG)

## CA 14 028 (20.05.1)

Suggestion to accept this request.

* Add `<experimental/reflect>` to Table 19 referenced by 20.5.1.3.

## CH 056 (21.12.04.2)

## CA 1 085 (General)

TBD. I do not understand this unfortunately. This seems like a LWG issue?

---
references:
  - id: N4766
    citation-label: N4766
    title: "Working Draft, C++ Extensions for Reflection"
    author:
      - family: Chochlik
        given: Matus
      - family: Naumann
        given: Axel
      - family: Sankel
        given: David
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4766.pdf
  - id: N5325
    citation-label: N5325
    title: "Summary of Voting on PDTS 23619, Technical Specification -- C++ Extensions for Reflection"
    author:
      - family: "Secretariat: ANSI (United States)"
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n5325.pdf
---
