---
title: "Suggested Reflection TS NB Resolutions"
document: D????
date: 2019-01-10
audience: SG7/Evolution/LEWG/LWG/Core
author:
  - name: Matus Chochlik
    email: <chochlik@gmail.com>
  - name: Axel Naumann
    email: <Axel.Naumann@cern.ch>
  - name: David Sankel
    email: <dsankel@bloomberg.net>
toc: true
toc-depth: 4
---

# Introduction

This paper contains resolution suggestions to national body comments issued in
@N5325 which summarizes responses to @N4766, the proposed Reflection TS.

# Suggested core resolutions (EWG / CWG)

## CH 004 (04.03) - SG10/CWG

See GB 086.

## CH 005 (06p1) - CWG

Suggest to reject the proposed change, in favor of the conflicting solution proposed in CH 006.

## CH 006 (06p1) - CWG

Suggest to accept the proposed change with modification, to clarify that *alias* refers exclusively to types:

> Rename all occurrences of *alias* to *type-alias* throughout the document.

(Note: the modification consists of the added hyphen in "*type-alias*".)

## CA 4 008 (08) - CWG

Suggest to reject the proposed change: the type specified by a *reflexpr-specifier* satisfies `Constant` only if the  *reflexpr-operand* is the name of a constexpr variable or an enumerator.

(Note that the example provided as part of CA 4 008 is invalid as `reflexpr(foo(a))` specifies a type that satisfies `FunctionCallExpression`, not `Constant`.)


## PL 009 (10.01.7.2, 10.1.7.6) - CWG

Suggest to accept the proposed change: while the implementation defines the type, including its name, the TS does not actually specify the types. The use of "unspecified type" would be in line with many other occurrences in the IS (see e.g. [std.manip]).

Modify 10.1.7.2/3 as follows:

> For a *reflexpr-operand* `x`, the type denoted by `reflexpr(x)` is an [implementation-defined]{.rm}[unspecified]{.add} type that satisfies the constraints laid out in 10.1.7.6.

Modify 10.1.7.6/3 as follows:

> The type specified by the *reflexpr-specifier* is [implementation-defined]{.rm}[unspecified]{.add}.


## CH 010 (10.01.7.2) - SG7/EWG

Suggest to reject the proposed change, with the rationale to allow future extensions reflecting templates. For those, a leading `template` specifier could be useful. The example's intent can instead be achieved using an intermediary alias:

```
using ABC = A::template B<C>;
using ABC_r = reflexpr(ABC);
```

## CA 5 011 (10.01.7.2) - CWG

Suggest to accept the proposed change.

Modify 10.1.7.2 as follows:

> | *reflexpr-operand:*
> |    `::`
> :::rm
> |    *type-id*
> |    *nested-name-specifier~opt~* *identifier*
> |    *nested-name-specifier~opt~* *simple-template-id*
> :::
> :::add
> |    *id-expression*
> :::

Modify 10.1.7.6 as follows:

> For an operand of the form [*identifier*]{.rm}[*id-expression*]{.add} where[*identifier*]{.rm}[*id-expression*]{.add} is a template *type-parameter*,...

Modify the caption of Table 12 as follows:

> `reflect` concept (21.12.3) that the type specified by a *reflexpr-specifier* satisfies, for a given
[*reflexpr-operand identifier* or *simple-template-id*]{.rm}[*id-expression*]{.add}.

Modify the description of the second column of Table 12 as follows:

> [*identifier* or *simple-template-id* kind]{.rm}[kind of name denoted by *id-expression*]{.add}


## CH 013 (10.01.7.6) - CWG

Suggest to accept the proposed change.

Modify 10.1.7.6 as follows:

> If the *reflexpr-operand* designates an entity or alias at block scope (6.3.3) or function [prototype]{.rm}[parameter]{.add} scope (6.3.4) and...

## CA 12 016 (10.01.7.6 p1) - CWG

TBD: should a constant expression (`1+foo('a')`) be allowed as a *reflexpr-operand*?

## CA 11 017 (10.01.7.6 p1) - CWG

Suggest to accept the proposed change.

Add the following line to Table 12, as the last row in the "type" Category:

> :::add
> |     | decltype-specifier | both `reflect::Type` and `reflect::Alias` |
> :::


## CA 9 019 (10.01.7.6 p1) - CWG

## CA 7 021 (10.01.7.6 p1) - CWG

## US 024 (10.01.7.6 p1) - CWG

## US 025 (10.01.7.6 p1) - CWG

## CH 026 (17.07.2.1 p09.10) - CWG

## CA 13 027 (17.07.2.1 p1) - CWG

## CH 029 (21.12) - CWG

## CA 16 030 (21.12) - CWG

## CA 15 031 (21.12) - SG7/EWG

## CH 032 (21.12.02) - CWG

## PL 035 (21.12.02) - CWG

## PL 036 (21.12.02) - SG7/EWG

## CH 039 (21.12.02, 21.12.3.9) - CWG

## CH 040 (21.12.03) - SG7/EWG

## CH 041 (21.12.3)/CH 072 (21.12.04.5) - SG7/EWG

See 21.12.4.5. This is the proper use of namespacing and do not expect
problems. Suggest no action.

## CH 041 (21.12.3.10) - SG7/EWG

Suggest to accept this change.

```diff
- template <class T> concept Namespace = Scope<T> && see below;
+ template <class T> concept Namespace = Named<T> && Scope<T> && see below;
```

Test [for the first form]{.add}

## CH 042 (21.12.3.18) - SG7/EWG

This is a misunderstanding. A 'base' in this case has a class which is
accessible with `get_class`. This class then has a name. Suggest no action.

## CH 043 (21.12.03.6) - CWG

## CH 044 (21.12.03.7) - CWG

## CA 19 045 (21.12.04) - CWG

## CA 18 046 (21.12.04) - CWG

## PL 047 (21.12.04) - SG7/EWG

It is unclear how (or if) such a thing can be implemented. At any rate, this is
something that can be added in the future if we get implementation experience
that suggests this is possible and desirable.

## CA 20 049 (21.12.04.1) - CWG

## CH 050 (21.12.04.10 p1) - CWG

## CA 36 052 (21.12.04.16 p1) - CWG

## CA 35 053 (21.12.04.16) - SG7/EWG

TBD. I don't understand what is meant by "reference binding" in this context.
Myy understanding is that it is already clear that the example code is correct.
We could potentially add an example?

## PL 054 (21.12.04.18) - SG7/EWG

TBD. This is an interesting idea and the authors would invite a paper that
provides the described behavior.


## CH 057 (21.12.04.3 p2.1) - SG7/EWG

This is already the existing behavior and lambda objects are specifically
called out. See Section 21.12.4.3 paragraph 2.5. Lambda objects are not unnamed
entities.

## CH 058 (21.12.04.3) - SG7/EWG

21.12.4.2 paragraph 2.1 seeems to already handle alias templates.

TBD: do we reflect on variables?


## CA 32 060 (21.12.04.3 p2) - CWG

## CA 31 061 (21.12.04.3 p2) - CWG

## CA 28 064 (21.12.04.3 p2) - CWG

## CA 27 065 (21.12.04.3 p2) - CWG

## CA 26 066 (21.12.04.3 p2) - CWG

## CA 24 068 (21.12.04.3 p2) - CWG

## CH 074 (21.12.04.6) - SG7/EWG

TBD. This sounds like a good idea. The scope of a class template template
parameter should be the class template and the scope of a function template
template parameter should be the function.

**Needs wording**

## US 075 (21.12.04.6) - CWG

## CH 078 (21.12.04.7 and many others) - CWG

## CH 079 (21.12.04.9) - SG7/EWG

This sounds like a good idea.

**Needs wording**


## CH 080 (21.12.04.9) - SG7/EWG

This sounds like a good idea. The wording is in the proposed change.

Add new paragraph after paragraph 4:

> ::: add
> \pnum{5} `reflect::get_pointer<T>` is ill-formed if `T` reflects a reference
> and the name of the reference in a context with no lvalue-to-rvalue
> conversion would not be a constant expression."
> :::

## CH 082 (Annex C) - CWG

## GB 083 (Annex C) - CWG

## GB 084 (Annex C) - CWG

## GB 086 (General, 04.2) - SG10/CWG

Propose to accept the suggested modification, by inserting a new 4.3 between 4.2 and 4.3:

::: add
> 4.3 Feature-testing recommendations [intro.features]
> 
> \pnum{1} An implementation that provides support for this Technical Specification shall define the feature test
> macro(s) in Table 2.
>
> Macro name     Value
> -----------    ------
> __cpp_reflect  201811
>
> Table 2 - Feature-test macro(s)
> 
:::


# Suggested library resolutions (LEWG/LWG)

## CA 14 028 (20.05.1) - LEWG

Suggestion to accept this request.

* Add `<experimental/reflect>` to Table 19 referenced by 20.5.1.3.

## CH 056 (21.12.04.2) - SG7/LWG

## CA 1 085 (General) - SG7/LEWG

TBD. I do not understand this unfortunately. This seems like a LWG issue?

---
references:
  - id: N4766
    citation-label: N4766
    title: "Working Draft, C++ Extensions for Reflection"
    author:
      - family: Chochlik
        given: Matus
      - family: Naumann
        given: Axel
      - family: Sankel
        given: David
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4766.pdf
  - id: N5325
    citation-label: N5325
    title: "Summary of Voting on PDTS 23619, Technical Specification -- C++ Extensions for Reflection"
    author:
      - family: "Secretariat: ANSI (United States)"
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n5325.pdf
---
